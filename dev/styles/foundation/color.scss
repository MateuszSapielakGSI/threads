// ==|== foundation: color =====================================================
// =============================================================================

// Default maps
// -----------------------------------------------------------------------------
$default-color-data: (
  white: (
    base: #fff,
  ),
  black: (
    base: #000,
  ),
  yellow: (
    base: #ffd117,
  ),
  orange: (
    base: #ff9517,
  ),
  red: (
    base: #ff5d5d,
  ),
  purple: (
    base: #b762ff,
  ),
  blue: (
    base: #0078bd,
  ),
  green: (
    base: #96bf48,
  ),
);

$custom-color-data: () !default;

// Functions
// -----------------------------------------------------------------------------
// Returns the color value for a given color name and group.
// @param {String} $hue - The color's hue.
// @param {String} $value (optional) - The darkness/lightness of the color. Defaults to base.
// @param {Color} $for-background (optional) - The background-color on which this color will appear.
// Applies a multiply filter to ensure appropriate contrast.
// @return {Color} The color value.
@function color($hue, $value: base, $for-background: null) {
  $color-data: map-merge($default-color-data, $custom-color-data);
  $fetched-color: map-get(
    map-get($color-data, $hue)
  , $value);

  // if the fetched value matches another key, get the value of that matching key
  @if map-has-key($color-data, $fetched-color) {
    $fetched-color: map-get(
      map-get($color-data, $fetched-color)
    , $value);
  }

  @if type-of($for-background) == color {
    $fetched-color: color-multiply($fetched-color, $for-background);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    @error 'Color `#{$hue} - #{$value}` not found. Available colors: #{available-names($color-data)}';
  }
}

// Darkens the foreground color by the background color.
// This is the same as the “multiply” filter in graphics apps.
// @param {Color} $foreground - The color to darken.
// @param {Color} $background - The background to base darkening on.
// @return {Color} The modified color.
@function color-multiply($foreground, $background: null) {
  @if type-of($background) != color {
    $background: #fff;
  }

  @return $foreground * $background / 255;
}

// Determine strength of inset shadow based on background color
// @param {Color} $color - The color to match shadow opacity against
// @return {Number} The decimal value of opacity
@function inset-shadow($color) {
  @if (lightness($color) > 80 or opacity($color) < 0.5) {
    @return 0.1;
  } @else {
    @return 0.2;
  }
}
