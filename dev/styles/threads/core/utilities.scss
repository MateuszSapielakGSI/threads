// ==|== threads > core > utilities ============================================
// =============================================================================

// Map functions
// -----------------------------------------------------------------------------
// Returns the list of available names in a given map.
// @param {Map} $map - The map of data to list the names from.
// @param {Number} $map (optional) - The level of depth to get names from.
// @return {String} The list of names in the map.
@function available-names($map, $level: 1) {
  @if type-of($map) != map {
    @return null;
  }

  $output: '';
  $newline: '\A ';

  @if $level == 1 {
    @each $key, $value in $map {
      $output: $output + '#{$newline}- #{$key} #{available-names($value, $level + 1)}';
    }
  } @else {
    $output: '(';
    $i: 1;

    @each $key, $value in $map {
      $sep: if($i < length($map), ', ', '');
      $output: $output + '#{$key}#{$sep}#{available-names($value, $level + 1)}';
      $i: $i + 1;
    }

    $output: $output + ')';
  }

  @return $output;
}

// Fetch nested keys from a map.
// @param {Map} $map - The map you want to check against.
// @param {Arglist} $keys - Keys to fetch
// @return {Value} The value held by the key you want fetched.
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

// Merge multiple maps into one.
// @param {Map} $map - Initial default map.
// @param {ArgList} $maps - Other maps to merge.
// @return {Map} The final merged map.
@function map-extend($map, $maps...) {
  @for $i from 1 through length($maps) {
    @each $key, $value in nth($maps, $i) {
      @if (type-of($value) == map) and (type-of(map-get($map, $key)) == map) {
        $value: map-extend(map-get($map, $key), $value);
      }

      $map: map-merge($map, ($key: $value));
    }
  }

  @return $map;
}

// Helper functions
// -----------------------------------------------------------------------------
// Returns the url() function containing the path to the requested asset.
// @param {String} $media-type - Type of asset you want to fetch.
// @param {String} $filename - Filename including extension.
// @return {String} url() with path - example: url('path/to/requested-asset.ftw')
@function path-to-asset($media-type, $filename) {
  $accepted-media-types: (
    svg: 'svg',
    image: 'img',
    font: 'fonts',
  );

  $fetched-value: map-get($accepted-media-types, $media-type);

  @if type-of($fetched-value) == string {
    @return url('../#{$fetched-value}/#{$filename}');
  } @else {
    @error 'Media type `#{$media-type}` not found. Available types: #{available-names($accepted-media-types)}';
  }
}

// Darkens the foreground color by the background color.
// This is the same as the “multiply” filter in graphics apps.
// @param {Color} $foreground - The color to darken.
// @param {Color} $background - The background to base darkening on.
// @return {Color} The modified color.
@function color-multiply($foreground, $background: null) {
  @if type-of($background) != color {
    $background: #fff;
  }

  @return $foreground * $background / 255;
}

// Determine strength of inset shadow based on background color
// @param {Color} $color - The color to match shadow opacity against
// @return {Number} The decimal value of opacity
@function inset-shadow($color) {
  @if (lightness($color) > 80 or opacity($color) < 0.5) {
    @return 0.1;
  } @else {
    @return 0.2;
  }
}
