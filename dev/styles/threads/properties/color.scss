// ==|== threads > properties > color ==========================================
// =============================================================================

$color-data: (
  white: (
    base: #fff,
  ),
  black: (
    base: #000,
  ),
  yellow: (
    base: #ffd117,
  ),
  orange: (
    base: #ff9517,
  ),
  red: (
    base: #ff5d5d,
  ),
  purple: (
    base: #b762ff,
  ),
  blue: (
    base: #0078bd,
  ),
  green: (
    base: #96bf48,
  ),
);

// Returns the color value for a given color name and group.
// @param {String} $hue - The color's hue.
// @param {String} $variant (optional) - The darkness/lightness of the color. Defaults to base.
// @param {Color} $for-background (optional) - The background-color on which this color will appear.
// Applies a multiply filter to ensure appropriate contrast.
// @return {Color} The color value.
@function color($hue, $variant: base, $for-background: null) {
  $fetched-color: map-deep-get($color-data, $hue, $variant);

  // if the fetched value matches another key, get the value of that matching key
  @if map-has-key($color-data, $fetched-color) {
    $fetched-color: map-deep-get($color-data, $fetched-color, $variant);
  }

  @if type-of($for-background) == color {
    $fetched-color: color-multiply($fetched-color, $for-background);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    @error 'Color `#{$hue} - #{$variant}` not found. Available colors: #{available-names($color-data)}';
  }
}

// Returns a new map, formed by merging the target Thread property with a custom map.
// @param {Map} $custom-map - The custom map containing new and/or override keys + values.
// @return {Map} The new merged map, to be re-assigned as the Thread property data variable.
@function set-color-data($custom-map) {
  @return map-extend($color-data, $custom-map);
}
